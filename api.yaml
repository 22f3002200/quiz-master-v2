openapi: 3.0.0
info:
  title: Quiz Master API
  description: API for a quiz application, allowing users to take quizzes and admins to manage content.
  version: 1.0.0
servers:
  - url: /api
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchema'
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Validation error
        '409':
          description: User with this email already exists
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginSchema'
      responses:
        '200':
          description: Login successful
        '400':
          description: Validation error
        '401':
          description: Invalid email or password
  /auth/refresh:
    post:
      summary: Refresh access token
      tags:
        - Auth
      responses:
        '200':
          description: Token refreshed successfully
        '404':
          description: User not found
  /auth/logout:
    post:
      summary: Logout a user
      tags:
        - Auth
      responses:
        '200':
          description: Successfully logged out
  /auth/profile:
    get:
      summary: Get user profile
      tags:
        - Auth
      responses:
        '200':
          description: User profile data
        '404':
          description: User not found
  /auth/me:
    put:
      summary: Update user profile
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateSchema'
      responses:
        '200':
          description: User profile updated successfully
        '400':
          description: Validation error
        '409':
          description: Email already exists
  /auth/password:
    post:
      summary: Change user password
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordSchema'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Validation error or incorrect old password
        '404':
          description: User not found
  /chapters/{chapter_id}/quizzes:
    get:
      summary: List quizzes by chapter
      tags:
        - Quizzes
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of quizzes for the given chapter
  /quizzes/{quiz_id}:
    get:
      summary: Get a quiz for an attempt
      tags:
        - Quizzes
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The quiz data including questions
  /quizzes/{quiz_id}/submit:
    post:
      summary: Submit a quiz and calculate the score
      tags:
        - Quizzes
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: object
                  additionalProperties:
                    type: integer
      responses:
        '200':
          description: Quiz submitted successfully
  /my-scores:
    get:
      summary: Get scores of the current user
      tags:
        - Scores
      responses:
        '200':
          description: A list of the user's scores
  /dashboard/stats:
    get:
      summary: Get user dashboard statistics
      tags:
        - Dashboard
      responses:
        '200':
          description: User's dashboard statistics
  /dashboard/performance:
    get:
      summary: Get user performance data over time
      tags:
        - Dashboard
      responses:
        '200':
          description: A list of scores over time
  /scores/{score_id}/review:
    get:
      summary: Get a review of a submitted quiz
      tags:
        - Scores
      parameters:
        - name: score_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A review of the quiz with user answers and correct answers
  /admin/subjects:
    post:
      summary: Create a new subject
      tags:
          - Admin - Subjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectCreateSchema'
      responses:
        '201':
          description: Subject created successfully
    get:
      summary: List all subjects
      tags:
        - Admin - Subjects
      responses:
        '200':
          description: A list of all subjects
  /admin/subjects/{subject_id}:
    put:
      summary: Update a subject
      tags:
        - Admin - Subjects
      parameters:
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubjectUpdateSchema'
      responses:
        '200':
          description: Subject updated successfully
    delete:
      summary: Delete a subject
      tags:
        - Admin - Subjects
      parameters:
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subject deleted successfully
  /admin/subjects/{subject_id}/chapters:
    post:
      summary: Create a new chapter
      tags:
        - Admin - Chapters
      parameters:
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterCreateSchema'
      responses:
        '201':
          description: Chapter created successfully
    get:
      summary: List chapters in a subject
      tags:
        - Admin - Chapters
      parameters:
        - name: subject_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of chapters in the subject
  /admin/chapters/{chapter_id}:
    put:
      summary: Update a chapter
      tags:
        - Admin - Chapters
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterUpdateSchema'
      responses:
        '200':
          description: Chapter updated successfully
    delete:
      summary: Delete a chapter
      tags:
        - Admin - Chapters
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Chapter deleted successfully
  /admin/quizzes/{quiz_id}/questions:
    post:
      summary: Create a new question for a quiz
      tags:
        - Admin - Questions
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreateSchema'
      responses:
        '200':
          description: Question created successfully
    get:
      summary: List questions in a quiz
      tags:
        - Admin - Questions
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of questions in the quiz
  /admin/questions/{question_id}:
    put:
      summary: Update a question
      tags:
        - Admin - Questions
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdateSchema'
      responses:
        '200':
          description: Question updated successfully
    delete:
      summary: Delete a question
      tags:
        - Admin - Questions
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Question deleted successfully
  /admin/export-csv:
    post:
      summary: Export a CSV report
      tags:
        - Admin - Analytics
      responses:
        '200':
          description: CSV report exported successfully
components:
  schemas:
    RegisterSchema:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        full_name:
          type: string
        qualification:
          type: string
        dob:
          type: string
          format: date
    LoginSchema:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    UserUpdateSchema:
      type: object
      properties:
        email:
          type: string
          format: email
        full_name:
          type: string
        qualification:
          type: string
        dob:
          type: string
          format: date
    ChangePasswordSchema:
      type: object
      properties:
        current_password:
          type: string
        new_password:
          type: string
    SubjectCreateSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    SubjectUpdateSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ChapterCreateSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ChapterUpdateSchema:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    QuestionCreateSchema:
      type: object
      properties:
        statement:
          type: string
        option1:
          type: string
        option2:
          type: string
        option3:
          type: string
        option4:
          type: string
        correct_option:
          type: integer
        marks:
          type: number
        negative_marks:
          type: number
    QuestionUpdateSchema:
      type: object
      properties:
        statement:
          type: string
        option1:
          type: string
        option2:
          type: string
        option3:
          type: string
        option4:
          type: string
        correct_option:
          type: integer
        marks:
          type: number
        negative_marks:
          type: number
